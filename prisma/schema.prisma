// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



//TABLES

model Slideshow {
  id    Int    @id @default(autoincrement())
  image String @db.VarChar(255)
}

model Phone {
  id    Int    @id @default(autoincrement())
  phone String @db.VarChar(255)
}

model Iphone {
  id         Int     @id @default(autoincrement())
  bestseller Boolean @default(false)
  title      String  @db.VarChar(255)
  price      Float
  image      String  @db.VarChar(255)
  carrier    String  @db.VarChar(50)

   models     IphoneModels[]
}

model IphoneModels {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(255)
  iphoneId  Int     
  iphone    Iphone    @relation(fields: [iphoneId], references: [id])
  storage   String    @db.VarChar(50)
  condition String    @db.VarChar(50)
  color     String    @db.VarChar(50)
  carrier   String    @db.VarChar(50)
  available Boolean   @default(true)
  price     Float
  reviews   Review[]  // Add relation to reviews
  
  @@index([iphoneId])
}


model ShippingInfo {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String
  phone     String
  address   String
  city      String
  state     String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Add user relation
  userId    String   // Foreign key
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}


model User {
  id            String         @id @default(uuid())
  externalId    String?        @unique  // Keycloak user ID
  email         String         @unique
  emailVerified Boolean        @default(false)
  
  // Profile information
  firstName     String?        @db.VarChar(50)
  lastName      String?        @db.VarChar(50)
  phoneNumber   String?        @db.VarChar(20)
  avatar        String?        @db.Text     // URL to profile picture
  
  // Account status
  isActive      Boolean        @default(true)
  
  // Timestamps
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastLoginAt   DateTime?

  // Relations
  shippingInfo  ShippingInfo[]
  cartItems     CartItem[]
  reviews       Review[]       // Added relation to reviews

  @@index([email])
  @@index([externalId])
}

model Review {
  id             String        @id @default(uuid())
  rating         Int           // e.g., 1-5 stars
  title          String        @db.VarChar(255)
  comment        String        @db.Text
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // User relation
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  
  // Primary relation is to the specific model the user purchased
  modelId        Int
  model          IphoneModels  @relation(fields: [modelId], references: [id])

  @@index([userId])
  @@index([modelId])
}


model CartItem {
  id         String   @id @default(uuid())
  userId     String   // References User.id
  itemId     String   // The ID of the product (e.g., iPhone model ID)
  title      String   @db.VarChar(255)
  condition  String   @db.VarChar(50)
  storage    String   @db.VarChar(50)
  color      String   @db.VarChar(50)
  price      Decimal  @db.Decimal(10, 2)
  quantity   Int
  image      String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}



