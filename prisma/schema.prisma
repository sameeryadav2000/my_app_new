// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//TABLES

model Phone {
  id             Int          @id @default(autoincrement())
  phone          String       
  image          String

  phoneModels PhoneModel[]
}

model PhoneModel {
  id                    Int                 @id @default(autoincrement())
  model                 String              @unique
  phoneId               Int    
  phone                 Phone               @relation(fields: [phoneId], references: [id])

  phoneModelDetails     PhoneModelDetails[]
  images                ModelImage[]
  cartItems             CartItem[]
  purchasedItems        PurchasedItem[]
  reviews               Review[]  

  @@index([phoneId])
}

model PhoneModelDetails {
  id              Int         @id @default(autoincrement())

  phoneModelId    Int     
  phoneModels     PhoneModel  @relation(fields: [phoneModelId], references: [id])

  storage         String      
  condition       String      
      
  colorId         Int      
  color           Color       @relation("ColorToPhoneModelDetails", fields: [colorId], references: [id])
      
  price           Float
        
  available       Boolean     @default(true)
  purchased       Boolean     @default(false)
      
  sellerId        String
  seller          Seller      @relation(fields: [sellerId], references: [id])
      
  adminId         String
  admin           Admin       @relation(fields: [adminId], references: [id])
  
  cartItems       CartItem[]
  purchasedItems  PurchasedItem[]
      
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
      
  @@index([phoneModelId])
  @@index([colorId])
  @@index([adminId])
}

model Color {
  id                Int                  @id @default(autoincrement())
  color             String               

  phoneModelDetails PhoneModelDetails[]  @relation("ColorToPhoneModelDetails")
  modelImages       ModelImage[]         @relation("ColorToModelImage")
  cartItems         CartItem[]
  purchasedItems    PurchasedItem[]
  reviews           Review[]
}


model ModelImage {
  id            Int          @id @default(autoincrement())
  image         String       
  mainImage     Boolean      @default(false)

  colorId       Int    
  color         Color        @relation("ColorToModelImage", fields: [colorId], references: [id])

  phoneModelId  Int        
  phoneModels   PhoneModel   @relation(fields: [phoneModelId], references: [id])

  @@index([phoneModelId])
  @@index([colorId])
}

model ShippingInfo {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String
  phone     String
  address   String
  city      String
  state     String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Add user relation
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id                String         @id @default(uuid())
  externalId        String?        @unique  // Keycloak user ID or our own ID for local users
  email             String         @unique
  emailVerified     Boolean        @default(false)
  passwordHash      String?        // Add this field for storing hashed passwords
  
  firstName         String?        
  lastName          String?        
  phoneNumber       String?        
  avatar            String?        
  
  isActive          Boolean        @default(true)
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  lastLoginAt       DateTime?

  shippingInfo      ShippingInfo?
  cartItems         CartItem[]
  purchasedItems    PurchasedItem[]
  reviews           Review[]  
  verificationTokens VerificationToken[]
  passwordReset     PasswordReset?

  @@index([email])
  @@index([externalId])
}

model Review {
  id                                String        @id @default(uuid())
  rating                            Int                  
  title                             String        
  comment                           String    

  createdAt                         DateTime      @default(now())
  updatedAt                         DateTime      @updatedAt

  userId                            String
  user                              User          @relation(fields: [userId], references: [id])

  phoneModelId                      Int
  phoneModels                       PhoneModel    @relation(fields: [phoneModelId], references: [id])

  colorId                           Int
  color                             Color         @relation(fields: [colorId], references: [id])

  purchasedItemId                   String        @unique
  purchasedItem                     PurchasedItem @relation(fields: [purchasedItemId], references: [id])

  @@index([userId])
  @@index([phoneModelId])
  @@index([colorId])
  @@index([purchasedItemId]) 
}

model CartItem {
  id                          String                @id @default(uuid())

  userId                      String
  user                        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  phoneModelDetailsId         Int 
  phoneModelDetail            PhoneModelDetails     @relation(fields: [phoneModelDetailsId], references: [id])

  phoneModelId                Int 
  phoneModels                 PhoneModel            @relation(fields: [phoneModelId], references: [id])

  colorId                     Int  
  color                       Color                 @relation(fields: [colorId], references: [id])

  sellerId                    String
  seller                      Seller                @relation(fields: [sellerId], references: [id])

  condition                   String     
  storage                     String     
  price                       Decimal    
  quantity                    Int
  image                       String     
  createdAt                   DateTime   @default(now())
  updatedAt                   DateTime   @updatedAt
  

  @@index([userId])
  @@index([phoneModelId])
  @@index([phoneModelDetailsId])
  @@index([colorId])
  @@index([sellerId])
}

model PurchasedItem {
  id                          String                @id @default(uuid())
                
  userId                      String
  user                        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  phoneModelDetailsId         Int
  phoneModelDetail            PhoneModelDetails     @relation(fields: [phoneModelDetailsId], references: [id])

  phoneModelId                Int
  phoneModels                 PhoneModel            @relation(fields: [phoneModelId], references: [id])

  colorId                     Int
  color                       Color                 @relation(fields: [colorId], references: [id])

  sellerId                    String
  seller                      Seller                @relation(fields: [sellerId], references: [id])

  condition                   String
  storage                     String
  price                       Decimal
  quantity                    Int
  image                       String
  orderId                     String
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  review                      Review?
  
  @@index([userId])
  @@index([phoneModelDetailsId])
  @@index([phoneModelId])
  @@index([orderId])
  @@index([sellerId])
}


model Seller {
  id                    String                    @id @default(uuid())
  businessName          String              
  name                  String              
  email                 String                    @unique
  phone                 String              
  address               String              
  taxId                 String              
  isActive              Boolean                   @default(true)
              
  adminId               String              
  admin                 Admin                     @relation(fields: [adminId], references: [id])
              
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  phoneDetails          PhoneModelDetails[]
  purchasedItems        PurchasedItem[]
  cartItems             CartItem[]
  
  @@index([email])
  @@index([adminId])
}

model ContactMessage {
  id        String   @id @default(uuid())
  email     String
  phone     String
  message   String
  createdAt DateTime @default(now())
  
  @@index([email])
}

model Admin {
  id                String             @id @default(uuid())
  externalId        String?            @unique  // Keycloak admin user ID
  email             String             @unique
  emailVerified     Boolean            @default(false)
  
  firstName         String?
  lastName          String?
  phoneNumber       String?
  avatar            String?
  
  isActive          Boolean            @default(true)
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastLoginAt       DateTime?

  managedSellers    Seller[]
  phoneModelDetails PhoneModelDetails[]
  
  @@index([email])
  @@index([externalId])
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([token])
  @@index([userId])
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}