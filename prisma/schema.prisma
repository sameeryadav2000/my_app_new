// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



//TABLES

model Slideshow {
  id    Int    @id @default(autoincrement())
  image String @db.VarChar(255)
}

model Phone {
  id                  Int                 @id @default(autoincrement())
  phone               String              @db.VarChar(255)
  image               String?             @db.VarChar(255) 
  modelDropdowns      PhoneModel[]
}

model PhoneModel {
  id          Int    @id @default(autoincrement())
  model       String @db.VarChar(255)
  phoneId     Int    
  phone       Phone  @relation(fields: [phoneId], references: [id])
  details     PhoneModelDetails[]
  images      ModelImage[]
  
  @@index([phoneId])
}

model PhoneModelDetails {
  id        Int         @id @default(autoincrement())
  phoneId   Int     
  phone     PhoneModel  @relation(fields: [phoneId], references: [id])
  storage   String      @db.VarChar(50)
  condition String      @db.VarChar(50)

  colorId   Int?      
  color     Color?      @relation("ColorToPhoneModelDetails", fields: [colorId], references: [id])

  price     Float
  available Boolean     @default(true)
  purchased Boolean     @default(false)

  sellerId  String?
  seller    Seller?     @relation(fields: [sellerId], references: [id])

  createdBy String
  user      User        @relation(fields: [createdBy], references: [id])

  reviews   Review[]
  
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt

  @@index([phoneId])
  @@index([colorId])
  @@index([createdBy])
}

model Color {
  id        Int      @id @default(autoincrement())
  color     String   @db.VarChar(50)

  phoneModelDetails PhoneModelDetails[] @relation("ColorToPhoneModelDetails")
  modelImages       ModelImage[]        @relation("ColorToModelImage")
}

model ModelImage {
  id           Int          @id @default(autoincrement())
  image        String       @db.VarChar(255)
  mainImage    Boolean      @default(false)


  colorId      Int?    
  color        Color?       @relation("ColorToModelImage", fields: [colorId], references: [id])

  phoneId      Int?        
  phone        PhoneModel?  @relation(fields: [phoneId], references: [id])

  @@index([phoneId])
  @@index([colorId])
}

model ShippingInfo {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String
  phone     String
  address   String
  city      String
  state     String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Add user relation
  userId    String   @unique // Foreign key
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}


model User {
  id                String         @id @default(uuid())
  externalId        String?        @unique  // Keycloak user ID
  email             String         @unique
  emailVerified     Boolean        @default(false)
  
  firstName         String?        @db.VarChar(50)
  lastName          String?        @db.VarChar(50)
  phoneNumber       String?        @db.VarChar(20)
  avatar            String?        @db.Text   
  
  isActive          Boolean        @default(true)
  admin             Boolean        @default(false)
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  lastLoginAt       DateTime?

  shippingInfo      ShippingInfo?
  cartItems         CartItem[]
  purchasedItems    PurchasedItem[]
  reviews           Review[]  
  managedSellers    Seller[]     
  phoneModelDetails PhoneModelDetails[] @relation

  @@index([email])
  @@index([externalId])
}

model Review {
  id             String             @id @default(uuid())
  rating         Int               
  title          String             @db.VarChar(255)
  comment        String             @db.Text
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  
  userId         String
  user           User               @relation(fields: [userId], references: [id])
  
  modelId        Int
  model          PhoneModelDetails  @relation(fields: [modelId], references: [id])

  purchasedItemId String?           @unique// Making it optional with the ? mark
  purchasedItem   PurchasedItem?    @relation(fields: [purchasedItemId], references: [id])

  @@index([userId])
  @@index([modelId])
  @@index([purchasedItemId]) 
}


model CartItem {
  id         String     @id @default(uuid())
  userId     String     // References User.id
  itemId     String     // The ID of the product (e.g., iPhone model ID)
  title      String     @db.VarChar(255)
  condition  String     @db.VarChar(50)
  storage    String     @db.VarChar(50)
  color      String     @db.VarChar(50)
  price      Decimal    @db.Decimal(10, 2)
  quantity   Int
  image      String     @db.VarChar(255)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PurchasedItem {
  id         String   @id @default(uuid())
  userId     String   
  itemId     String   
  title      String   @db.VarChar(255)
  condition  String   @db.VarChar(50)
  storage    String   @db.VarChar(50)
  color      String   @db.VarChar(50)
  price      Decimal  @db.Decimal(10, 2)
  quantity   Int
  image      String   @db.VarChar(255)
  orderId    String   
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  review    Review?

  @@index([userId])
  @@index([orderId])
}

model Seller {
  id            String   @id @default(uuid())
  businessName  String   @db.VarChar(255)
  name          String   @db.VarChar(100)
  email         String   @unique @db.VarChar(255)
  phone         String   @db.VarChar(20)
  address       String   @db.Text
  taxId         String   @db.VarChar(50)
  isActive      Boolean  @default(true)
  
  adminId       String
  admin         User     @relation(fields: [adminId], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  phoneDetails  PhoneModelDetails[]
  
  @@index([email])
  @@index([adminId])
}